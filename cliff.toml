# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
Все заметные изменения в этом проекте будут задокументированы в этом файле.

Формат основан на [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
и этот проект соответствует [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}\
{% else %}\
    ## [unreleased]\
{% endif %}\
    {% for group, commits in commits | group_by(attribute="group") %}
        <h2> {{ group | upper_first }} </h2>
            <ul>
                {% for group, commits in commits | group_by(attribute="footers") %}
                    {% if commits.0.footers | length > 0 %}\
                        <li>
                            <h3> {{ commits.0.footers.0.value | upper_first }} </h3>
                               <ul>
                                    {% for commit in commits %}
                                        <li>
                                            {% if commit.breaking %} [**breaking**] {% endif %} {{  commit.message | upper_first }}
                                            ({{commit.author.name}}){% if commit.merge_commit %}✔️{% else %}❌{% endif %}\
                                        </li>
                                    {% endfor %}\
                               </ul>
                        </li>
                    {% else %}\
                        <li>
                            <h3> NO TASK </h3>
                            <ul>
                                {% for commit in commits %}\
                                    <li>
                                        {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
                                        ({{commit.author.name}}){% if commit.merge_commit %}✔️{% else %}❌{% endif %}\
                                    </li>
                                {% endfor %}
                           </ul>
                        </li>
                    {% endif %}\
                {% endfor %}\n
            </ul>
    {% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# postprocessors
postprocessors = [
    { pattern = '\$REPO', replace = "https://github.com/cocogitto/cocogitto" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/orhun/git-cliff/issues/${2}))"}, # replace issue numbers
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^doc", group = "Documentation" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactoring" },
    { message = "^style", group = "Style" },
    { message = "^revert", group = "Revert" },
    { message = "^test", group = "Tests" },
    { message = "^chore\\(version\\):", skip = true },
    { message = "^chore", group = "Miscellaneous Chores" },
    { body = ".*security", group = "Security" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
